import { Component, OnInit } from '@angular/core';
import { Cylinder } from '../../model/cylinder/cylinder.model';
import { CylinderService } from '../../service/cylinder.service';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { AuthServiceService } from '../../service/auth-service.service';

import { CylinderTypeService } from '../../service/cylinder-type.service';
import { CylinderType } from '../../model/cylinder-type/cylinder-type.model';
import { Router, NavigationEnd } from '@angular/router';
import { filter } from 'rxjs';
declare var bootstrap: any;
@Component({
  selector: 'app-cylinder-list',
  imports: [FormsModule,CommonModule],
  templateUrl: './cylinder-list.component.html',
  styleUrl: './cylinder-list.component.css'
})
export class CylinderListComponent implements OnInit {
  userRole: string | null = ''
  cylinders: Cylinder[] = [];
  cylinderTypes:CylinderType[]=[];
  newCylinder: Partial<Cylinder> = {
     // Default value, as the ID will be generated by the backend
    pressure: 0,
    temperature: 0,
    status: '',
    location: '',
    serialNumber: '',
    manufacturer: '',
    maintenanceDue: false,
    capacity: '',
     // Dates will be set by backend or admin, so initially undefined
    lastInspectedAt: undefined,
    lastMaintenanceDate: undefined,
    nextInspectionDate: undefined

    
  };

selectedCylinder: Cylinder | null = null; // Define selectedCylinder to hold the current editing cylinder
constructor(private cylinderService: CylinderService, 
    private cylinderTypeService: CylinderTypeService,
    private authService: AuthServiceService,
    private router: Router
  ) {}

 ngOnInit(): void {
     this.loadRole();
    this.loadCylinders();
    this.loadCylinderTypes();

      // Listen for route changes and update role dynamically
    this.router.events
      .pipe(filter(event => event instanceof NavigationEnd))
      .subscribe(() => {
        this.loadRole();
      });
 
  }


loadRole(): void {
  this.userRole = this.authService.getRole();
  //console.log('User role refreshed:', this.userRole);
}



  loadCylinders(): void {
    this.cylinderService.getAllCylinders().subscribe({
      next: (data: Cylinder[]) => {
        this.cylinders = data;
      },
      error: (err) => console.error('Error fetching cylinders:', err)
    });
  }


  loadCylinderTypes(): void {
  this.cylinderTypeService.getAllCylinderTypes().subscribe({
    next: (data: CylinderType[]) => this.cylinderTypes = data,
    error: (err) => console.error('Failed to fetch cylinder types', err)
  });
}


onCylinderTypeChange(): void {
  const selectedType = this.newCylinder.cylinderType;
  if (selectedType) {
    this.newCylinder.capacity = selectedType.capacity;
    this.newCylinder.manufacturer = selectedType.manufacturer;
    console.log(this.cylinderTypes);
  }
}


  addCylinder(): void {
    this.cylinderService.createCylinder(this.newCylinder).subscribe({
      next: (data: Cylinder) => {
        this.cylinders.push(data);
        this.newCylinder = {
          pressure: 0,
          temperature: 0,
          status: '',
          location: '',
          serialNumber: '',
          manufacturer: '',
          maintenanceDue: false,
          capacity: '',
         
        };
      },
      error: (err) => {
        console.error('Failed to add cylinder:', err);
      }
    });
  }

  deleteCylinder(cylinderId?: number): void {
    if (cylinderId !== undefined) {
      this.cylinderService.deleteCylinder(cylinderId).subscribe({
        next: () => this.loadCylinders(),
        error: (err) => console.error('Failed to delete cylinder:', err)
      });
    }
  }

  editCylinder(cylinder: Cylinder): void {
    this.selectedCylinder = { ...cylinder };

    const modalElement = document.getElementById('exampleModal');
    if (modalElement) {
      const modalInstance = bootstrap.Modal.getOrCreateInstance(modalElement);
      modalInstance.show();
    }
  }

  saveChanges(): void {
    if (this.selectedCylinder?.cylinderId) {
      this.cylinderService.updateCylinder(this.selectedCylinder).subscribe({
        next: (updated) => {
          const index = this.cylinders.findIndex(c => c.cylinderId === updated.cylinderId);
          if (index !== -1) this.cylinders[index] = updated;

          this.selectedCylinder = null;

          const modalElement = document.getElementById('exampleModal');
          if (modalElement) {
            const modalInstance = bootstrap.Modal.getInstance(modalElement);
            modalInstance?.hide();
          }

          // Refresh list without reloading the page
          this.loadCylinders();
        },
        error: (err) => {
          console.error('Failed to save changes:', err);
        }
      });
    }
  }






}  
